install.packages("tidytext")
library(tidytext)
library(tidyverse)
library(tidyverse)
library(openintro)
library(tidytext)
install.packages("wordcloud")
install.packages("wordcloud")
install.packages("wordcloud")
#R_LIBS_SITE=${R_LIBS_SITE-'/usr/local/lib/R/site-library:/usr/lib/R/site-library:/usr/lib/R/library'}
R_LIBS_SITE=${R_LIBS_SITE-'/usr/local/lib/R/site-library:/usr/lib/R/site-library:/usr/lib/R/library'}
R_LIBS_SITE={R_LIBS_SITE-'/usr/local/lib/R/site-library:/usr/lib/R/site-library:/usr/lib/R/library'}
install.packages("wordcloud")
install.packages("wordcloud")
install.packages("ggplot2")
load("C:/Users/henni/Downloads/kielmc_v4.RData")
reg_mod <- lm(data=Data, log(price) ~ log(dist)+log(intst)+log(land)+rooms+baths+age)
summary(reg_mod)
data_red <- Data%>%
filter(year==1981)
library(tidyverse)
data_red <- Data%>%
filter(year==1981)
reg_mod <- lm(data=data_red, log(price) ~ log(dist)+log(intst)+log(land)+rooms+baths+age)
summary(reg_mod)
first_mod <- lm(data=data_red, log(price)~ log(dist))
summary(first_mod)
reg_mod <- lm(data=data_red, log(price) ~ log(dist)+log(intst)+log(land)+rooms+baths+age)
summary(reg_mod)
reg_mod <- lm(data=data_red, log(price) ~ ldist + lintst + lland +rooms + baths + age)
summary(reg_mod)
load("C:/Users/henni/Downloads/hprice1_v1.RData")
ols_mod <- lm(data=Data, price ~ lotsize + sqrtft + bdrms)
summary(ols_mod)
ols_mod <- lm(data=Data, price ~ lotsize + sqrft + bdrms)
summary(ols_mod)
-43.0760+0.002*10000+0.1346*2300+4*12.7771
Data$lotsize0 <- lotsize - 10000
Data$lotsize0 <- Data$lotsize - 10000
Data$sqrft0 <- Data$sqrft - 2300
Data$lotsize0 <- Data$lotsize - 10000
Data$sqrft0 <- Data$sqrft - 2300
Data$bdrms0 <- Data$bdrms - 4
ols_mod_2 <- lm(data=Data, price ~ lotsize0 + sqrft0 + bdrms0)
summary(ols_mod_2)
library(broom)
ols_aug <- augment(ols_mod_2)
ols_aug
var(ols_aug$.resid)
sqrt(var(ols_aug$.resid))
load("C:/Users/henni/Downloads/meap00_v4.RData")
coefOut <- exp(coef(busOut))
library(tidyverse)
library(broom)
busOut <- glm(data=bus, formula =Bus ~ CommuteDays, family = "binomial" )
bus <- read.csv(file.path("C:","Users","henni","Documents","Data_Camp-R-Data-Scientist-Track","Data","bus_commutes.csv"))
busOut <- glm(data=bus, formula =Bus ~ CommuteDays, family = "binomial" )
summary(busOut)
coefOut <- exp(coef(busOut))
coefOut
tidy(busOut, exponantiate=T, conf.int=T)
tidy(busOut, exponentiate=T, conf.int=T)
?tidy
tidy(busOut, exponentiate=TRUE , conf.int=TRUE)
bus$Bus2 <- as.numeric(bus$bus=="Yes")
as.numeric(bus$bus=="Yes")
bus$bus=="Yes"
bus$Bus=="Yes"
bus$Bus2 <- as.numeric(bus$Bus=="Yes")
glimpse(bus)
View(bus)
ggJitter <- ggplot(data = bus, aes(x=MilesOneWay, y=Bus2))+
geom_jitter(width=0, height = 0.05)+
ylab("Probability of riding the bus")+
xlab("One-way commute trip (in miles)")
ggJitter + geom_smooth(method = 'glm', method.args = list(family = 'binomial'))
ggJitter+
geom_smooth(method='glm', method.args=list(family=binomial(link=probit), color='red', se=F))+
geom_smooth(method='glm', method.args=list(family=binomial(link=logit), color='blue', se=F))
ggJitter+
geom_smooth(method='glm', method.args=list(family=binomial(link=probit)), color='red', se=F)+
geom_smooth(method='glm', method.args=list(family=binomial(link=logit)), color='blue', se=F)
busBoth <- glm(data=bus, formula=Bus~CommuteDays+MilesOneWay, family="binomial")
summary(busBoth)
glm1 <- glm(cbind(Admitted, Rejected) ~ Gender, family = 'binomial', data = UCBAdmissions)
UCBAdmissions
View(UCBAdmissions)
glm1 <- glm(Admit ~ Gender, family = 'binomial', data = UCBAdmissions)
glm1 <- glm(Admit ~ Gender, family = 'binomial', data = UCBAdmissions)
glm2 <- glm(Admit ~ Gender+Dept, family = 'binomial', data = UCBAdmissions)
summary(glm1)
summary(glm2)
studentData <- read_csv(file.path("C:","Users","henni","Documents","Data_Camp-R-Data-Scientist-Track","Data",
"ClassRoom.txt"))
View(studentData)
ggplot(data = studentData, aes(x = housepov, y = mathgain)) +
geom_point() +
geom_smooth(method = 'lm')
summary(lm(mathgain ~ housepov , data =  studentData))
tute1 <- read_csv("http://robjhyndman.com/data/tute1.csv")
mytimeseries <- ts(data=tute1[,-1], start = 1981, frequency = 4)
# The [,-1] removes the first column which contains the quarters as we do not need them now.
# You need to either delete or turn eval=TRUE for this code to be evaluated.
autoplot(mytimeseries, facets=TRUE)
library(tidyverse)
#Exercise 1####
#Exploring Data sets
?gold
?woolyrnq
?gas
#ts object /Time series
class(gold)
class(woolyrnq)
class(gas)
#Using autoplot
autoplot(gold)+
labs(title = "Daily Gold Price in US Dollars",
subtitle = "1 Jan 1985 - 31 Mar 1989",
x="Time (Daily)",
y="Gold Price")+
theme_bw()
autoplot(woolyrnq)+
labs(title = "Quarterly production of woollen yarn in Australia",
subtitle = "Mar 1965 - Sep 1994",
x="Time (Quarterly)",
y="Metric Tons")+
theme_bw()
autoplot(gas)+
labs(title = "Australian monthly gas production",
subtitle = "1956 - 1995",
x="Time (Monthly)",
y="Gas Production")+
theme_bw()
#Checking frequency of time series
frequency(gold) #1
frequency(woolyrnq) #4
frequency(gas) #12
#Outlier in gold data
which.max(gold)
gold[770]
#Exercise 2 ####
#reading in data set
tute1 <- read_csv("http://robjhyndman.com/data/tute1.csv")
mytimeseries <- ts(data=tute1[,-1], start = 1981, frequency = 4)
# The [,-1] removes the first column which contains the quarters as we do not need them now.
# You need to either delete or turn eval=TRUE for this code to be evaluated.
autoplot(mytimeseries, facets=TRUE)
autoplot(mytimeseries)
library(fpp2)
library(tidyverse)
#Exercise 1####
#Exploring Data sets
?gold
?woolyrnq
?gas
#ts object /Time series
class(gold)
class(woolyrnq)
class(gas)
#Using autoplot
autoplot(gold)+
labs(title = "Daily Gold Price in US Dollars",
subtitle = "1 Jan 1985 - 31 Mar 1989",
x="Time (Daily)",
y="Gold Price")+
theme_bw()
autoplot(woolyrnq)+
labs(title = "Quarterly production of woollen yarn in Australia",
subtitle = "Mar 1965 - Sep 1994",
x="Time (Quarterly)",
y="Metric Tons")+
theme_bw()
autoplot(gas)+
labs(title = "Australian monthly gas production",
subtitle = "1956 - 1995",
x="Time (Monthly)",
y="Gas Production")+
theme_bw()
#Checking frequency of time series
frequency(gold) #1
frequency(woolyrnq) #4
frequency(gas) #12
#Outlier in gold data
which.max(gold)
gold[770]
#Exercise 2 ####
#reading in data set
tute1 <- read_csv("http://robjhyndman.com/data/tute1.csv")
mytimeseries <- ts(data=tute1[,-1], start = 1981, frequency = 4)
# The [,-1] removes the first column which contains the quarters as we do not need them now.
# You need to either delete or turn eval=TRUE for this code to be evaluated.
autoplot(mytimeseries, facets=TRUE)
autoplot(mytimeseries)
library(fpp2) # You will always load this package before analyzing any time series data.
tute1 <- read_csv("http://robjhyndman.com/data/tute1.csv")
library(tidyverse)
tute1 <- read_csv("http://robjhyndman.com/data/tute1.csv")
# or you can read your file from your computer using read.csv function
# tute1 <- read.csv("C:/Users/arifi/Downloads/tute1.csv")
mytimeseries <- ts(data=tute1[,-1], start = 1981, frequency = 4)
# The [,-1] removes the first column which contains the quarters as we do not need them now.
# You need to either delete or turn eval=TRUE for this code to be evaluated.
autoplot(mytimeseries, facets=TRUE)
#autoplot(mytimeseries)
# You need to either delete or turn eval=TRUE for this code to be evaluated.
autoplot(mytimeseries, facets=TRUE)
autoplot(mytimeseries)
# You need to either delete or turn eval=TRUE for this code to be evaluated.
autoplot(mytimeseries, facets=TRUE)+
labs(title = "Sales, AdBudget and GDP",
subtitle = "1981-2005, Facetted",
x="Time (Quarterly)",
y="Us Dollars")+
theme_bw()
autoplot(mytimeseries)
# You need to either delete or turn eval=TRUE for this code to be evaluated.
autoplot(mytimeseries, facets=TRUE)+
labs(title = "Sales, AdBudget and GDP, inflation adjusted",
subtitle = "1981-2005, facetted",
x="Time (Quarterly)",
y="Us Dollars",
caption = "Data from http://robjhyndman.com")+
theme_bw()
autoplot(mytimeseries)+
labs(title = "Sales, AdBudget and GDP, inflation adjusted",
subtitle = "1981-2005",
x="Time (Quarterly)",
y="Us Dollars",
caption = "Data from http://robjhyndman.com"))+
# You need to either delete or turn eval=TRUE for this code to be evaluated.
autoplot(mytimeseries, facets=TRUE)+
labs(title = "Sales, AdBudget and GDP, inflation adjusted",
subtitle = "1981-2005, facetted",
x="Time (Quarterly)",
y="Us Dollars",
caption = "Data from http://robjhyndman.com")+
theme_bw()
autoplot(mytimeseries)+
labs(title = "Sales, AdBudget and GDP, inflation adjusted",
subtitle = "1981-2005",
x="Time (Quarterly)",
y="Us Dollars",
caption = "Data from http://robjhyndman.com")+
theme_bw()
?read_csv
tute1 <- read_csv("http://robjhyndman.com/data/tute1.csv")%>%
select(everything(), -X1)
# or you can read your file from your computer using read.csv function
# tute1 <- read.csv("C:/Users/arifi/Downloads/tute1.csv")
mytimeseries <- ts(data=tute1, start = 1981, frequency = 4)
# The [,-1] removes the first column which contains the quarters as we do not need them now.
# You need to either delete or turn eval=TRUE for this code to be evaluated.
autoplot(mytimeseries, facets=TRUE)+
labs(title = "Sales, AdBudget and GDP, inflation adjusted",
subtitle = "1981-2005, facetted",
x="Time (Quarterly)",
y="Us Dollars",
caption = "Data from http://robjhyndman.com")+
theme_bw()
autoplot(mytimeseries, facets = F)+
labs(title = "Sales, AdBudget and GDP, inflation adjusted",
subtitle = "1981-2005",
x="Time (Quarterly)",
y="Us Dollars",
caption = "Data from http://robjhyndman.com")+
theme_bw()
?hsales
autoplot(hsales)
autoplot(hsales)+
labs(title = "Monthly sales of new one-family houses sold in the USA",
subtitle = "1973-1996",
x="Time (Monthly)",
y="Us Dollars",
caption = "Data from fpp2 package")+
theme_bw()
ggseasonplot(hsales)+
labs(title = "Monthly sales of new one-family houses sold in the USA",
subtitle = "1973-1996",
x="Time (Monthly)",
y="Us Dollars",
caption = "Data from fpp2 package")+
theme_bw()
ggseasonplot(hsales)+
labs(title = "Monthly sales of new one-family houses sold in the USA",
subtitle = "1973-1996, by Year",
x="Time (Monthly)",
y="Us Dollars",
caption = "Data from fpp2 package")+
theme_bw()
ggsubseriesplot(hsales)+
labs(title = "Monthly sales of new one-family houses sold in the USA",
subtitle = "1973-1996",
x="Time (Monthly)",
y="Us Dollars",
caption = "Data from fpp2 package")+
theme_bw()
gglagplot(hsales)+
labs(title = "Monthly sales of new one-family houses sold in the USA",
subtitle = "1973-1996",
x="Time (Monthly)",
y="Us Dollars",
caption = "Data from fpp2 package")+
theme_bw()
gglagplot(hsales)+
labs(title = "Monthly sales of new one-family houses sold in the USA",
subtitle = "1973-1996",
x="Time (Monthly)",
y="Us Dollars",
caption = "Data from fpp2 package")+
geom_smooth(method="lm",se=F, aes(alpha=0.5))+
theme_bw()
gglagplot(hsales)+
labs(title = "Monthly sales of new one-family houses sold in the USA",
subtitle = "1973-1996",
x="Time (Monthly)",
y="Us Dollars",
caption = "Data from fpp2 package")+
geom_smooth(method="lm",se=F, alpha=0.5)+
theme_bw()
autoplot(hsales)+
labs(title = "Monthly sales of new one-family houses sold in the USA",
subtitle = "1973-1996",
x="Time (Monthly)",
y="Us Dollars",
caption = "Data from fpp2 package")+
theme_bw()+
geom_smooth()
autoplot(hsales)+
labs(title = "Monthly sales of new one-family houses sold in the USA",
subtitle = "1973-1996",
x="Time (Monthly)",
y="Us Dollars",
caption = "Data from fpp2 package")+
theme_bw()+
geom_smooth(method="lm")
gglagplot(hsales)+
labs(title = "Monthly sales of new one-family houses sold in the USA",
subtitle = "1973-1996, lagged Plot",
x="Time (Monthly)",
y="Us Dollars",
caption = "Data from fpp2 package")+
geom_smooth(method="lm",se=F)+
theme_bw()
?window
hsales%>%
window(end=1989)%>%
autoplot()
hsales%>%
window(end=1989)%>%
autoplot()+
labs(title = "Monthly sales of new one-family houses sold in the USA",
subtitle = "1973-1996",
x="Time (Monthly)",
y="Us Dollars",
caption = "Data from fpp2 package")+
geom_smooth(method="lm")+
theme_bw()
ggAcf(hsales)+
labs(title = "Monthly sales of new one-family houses sold in the USA",
subtitle = "1973-1996",
x="Time (Monthly)",
y="Us Dollars",
caption = "Data from fpp2 package")+
theme_bw()
install_github("news-r/newsr")
library(remotes)
#Call this again at 8:50!
install_github("news-r/newsr")
install.packages("rstudioapi", "digest", "callr", "ps", "rvest","stringi",
"backports","xml2","selectr","gh", "whisker","yaml")
install.packages("rstudioapi", "digest", "callr", "ps", "rvest", "stringi", "backports", "xml2", "selectr", "gh", "whisker", "yaml")
install.packages("rstudioapi", "digest", "callr", "ps", "rvest", "stringi", "backports", "xml2", "selectr", "gh", "whisker", "yaml")
install.packages(c("rstudioapi", "digest", "callr", "ps", "rvest","stringi",
"backports","xml2","selectr","gh", "whisker","yaml"))
install.packages(c("rstudioapi", "digest", "callr", "ps", "rvest", "stringi", "backports", "xml2", "selectr", "gh", "whisker", "yaml"))
library(remotes)
#Call this again at 8:50!
install_github("news-r/newsr")
usethis::browse_github_pat()
usethis::edit_r_environ()
usethis::edit_r_environ?
edit_r_environ?
edit_r_environ?
usethis::browse_github_pat()
help(edit_r_environ)
gh::gh_whoami()
source('~/App State/Classes/Theses/Thesis - MSADA/Github_Repo/Coal_Mining-Thesis/Code/01-Data_Management_Data_Engineering.R', echo=TRUE)
setwd(file.path("C:", "Users", "henni", "Documents","App State","Classes", "Theses", "Thesis - MSADA", "Github_Repo",
"Coal_Mining-Thesis", "Data"))
source('~/App State/Classes/Theses/Thesis - MSADA/Github_Repo/Coal_Mining-Thesis/Code/01-Data_Management_Data_Engineering.R', echo=TRUE)
setwd(file.path("C:", "Users", "henni", "Documents","App State","Classes", "Theses", "Thesis - MSADA", "Github_Repo",
"Coal_Mining-Thesis"))
source('~/App State/Classes/Theses/Thesis - MSADA/Github_Repo/Coal_Mining-Thesis/Code/01-Data_Management_Data_Engineering.R', echo=TRUE)
source('~/App State/Classes/Theses/Thesis - MSADA/Github_Repo/Coal_Mining-Thesis/Code/02-Descriptive_Analysis.R', echo=TRUE)
library(lme4)
library(lmerTest)
library(AICcmodavg)
library(broom.mixed)
library(tidyr)
library(AICcmodavg)
library(reghelper)
#unconditional mean model####
uncond_mean_mod <- lmer(data=coal_data, mortality ~ 1 + (1|State))
#summary(uncond_mean_mod)
#Creating CSV file with model coefficients for Full Summary in Appendix
tidy(uncond_mean_mod)%>%
write_csv(path="Data/Tables/Model_Summary/01-uncond_mean_mod_coef.csv")
#Additional Measures
#Intra Class Correlation Coefficient, BIC, AICc
data.frame(ICC=ICC(uncond_mean_mod), BIC=BIC(uncond_mean_mod), AICc=AICc(uncond_mean_mod))%>%
pivot_longer(cols=everything(), names_to = "Measure", values_to = "Statistic")%>%
write_csv(path="Data/Tables/Model_Summary/01-uncond_mean_mod_stats.csv")
#unconditional growth model####
#Fixed Slope but random intercept
uncond_growth_mod <- lmer(data=coal_data, formula = mortality ~ coal_mining + (1|State))
#summary(uncond_growth_mod)
tidy(uncond_growth_mod)%>%
write_csv(path="Data/Tables/Model_Summary/02-uncond_growth_mod_coef.csv")
#Additional Measures
#Intra Class Correlation Coefficient, BIC, AICc
data.frame(ICC=ICC(uncond_growth_mod), BIC=BIC(uncond_growth_mod), AICc=AICc(uncond_growth_mod))%>%
pivot_longer(cols=everything(), names_to = "Measure", values_to = "Statistic")%>%
write_csv(path="Data/Tables/Model_Summary/02-uncond_growth_mod_stats.csv")
#Random Slope
uncond_growth_mod_rs <- lmer(data=coal_data, formula = mortality ~ coal_mining + (coal_mining|State))
#summary(uncond_growth_mod_rs)
tidy(uncond_growth_mod_rs)%>%
write_csv(path="Data/Tables/Model_Summary/02a-uncond_growth_mod_rs_coef.csv")
#Additional Measures
#Intra Class Correlation Coefficient, BIC, AICc
data.frame(ICC=ICC(uncond_growth_mod_rs), BIC=BIC(uncond_growth_mod_rs), AICc=AICc(uncond_growth_mod_rs))%>%
pivot_longer(cols=everything(), names_to = "Measure", values_to = "Statistic")%>%
write_csv(path="Data/Tables/Model_Summary/02a-uncond_growth_mod_rs_stats.csv")
#Full Model #####
full_model <- lmerTest::lmer(data=coal_data, formula = mortality ~ time + I(time^2) + coal_mining + median_mining +
Appalachia + rural + unemployment_std + median_income_std + poverty_rate_std +
median_age_std + hs_grad_rate_std + ba_higher_rate_std + perc_male_std +
perc_black_std + perc_amerin_std + perc_hisp_std + PopToPCP_m_std + drinking_m_std +
obesity_m_std + smoking_m_std + land_area_std + southern + uninsured_m_std +
coal_mining:Appalachia + median_mining:Appalachia + perc_hisp_std:perc_male_std +
hs_grad_rate_std:coal_mining + ba_higher_rate_std:coal_mining +
(coal_mining|State), control=lmerControl(optCtrl=list(maxfun=200000)))
#Creating CSV file with model coefficients for Full Summary in Appendix
tidy(full_model)%>%
write_csv(path="Data/Tables/Model_Summary/full_model_coef.csv")
#Additional Measures
#Intra Class Correlation Coefficient, BIC, AICc
data.frame(ICC=ICC(full_model), BIC=BIC(full_model), AICc=AICc(full_model))%>%
pivot_longer(cols=everything(), names_to = "Measure", values_to = "Statistic")%>%
write_csv(path="Data/Tables/Model_Summary/full_model_stats.csv")
# Outlier Analysis - These calculations take a long time ####
#Cook's Distance for group level.
#Rather than each observation, each group is excluded
#Includes a counter variable
alt_est_a <- influence(full_model, group = "State", count = T)
influence_state <- data.frame(cooks_d = cooks.distance(alt_est_a),
pc_change = pchange(alt_est_a),
sig_test = sigtest(alt_est_a),
df_betas = dfbetas(alt_est_a))
tidy(full_model)%>%
write_csv(path="Data/Tables/Model_Summary/full_model_coef.csv")
#Additional Measures
#Intra Class Correlation Coefficient, BIC, AICc
data.frame(ICC=ICC(full_model), BIC=BIC(full_model), AICc=AICc(full_model))%>%
pivot_longer(cols=everything(), names_to = "Measure", values_to = "Statistic")%>%
write_csv(path="Data/Tables/Model_Summary/full_model_stats.csv")
alt_est_a <- influence(full_model, group = "State", count = T)
library(influence.ME)
alt_est_a <- influence(full_model, group = "State", count = T)
influence_state <- data.frame(cooks_d = cooks.distance(alt_est_a),
pc_change = pchange(alt_est_a),
sig_test = sigtest(alt_est_a),
df_betas = dfbetas(alt_est_a))
install.packages(c("bdsmatrix", "bibtex", "bit", "blob", "broom", "car", "carData", "caret", "caTools", "censReg", "checkmate", "chron", "cli", "corrr", "covr", "crosstalk", "DBI", "dendextend", "devtools", "digest", "dplyr", "DT", "e1071", "effects", "forcats", "foreach", "forecast", "fracdiff", "fs", "ggplot2", "ggpubr", "ggrepel", "glmmTMB", "glmnet", "glue", "gplots", "h2o", "haven", "hexbin", "Hmisc", "htmlTable", "igraph", "infer", "ISOcodes", "iterators", "janitor", "jomo", "lattice", "latticeExtra", "lava", "leaps", "lifecycle", "lmerTest", "maptools", "MASS", "matrixStats", "maxLik", "mice", "miscTools", "ModelMetrics", "modelr", "modeltools", "MuMIn", "mvtnorm", "nlme", "openxlsx", "ordinal", "pbkrtest", "plm", "plotly", "plotrix", "plyr", "prodlim", "quanteda", "quantmod", "quantreg", "raster", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppArmadillo", "RcppParallel", "RCurl", "Rdpack", "recipes", "rlang", "RMySQL", "RSpectra", "RSQLite", "Rttf2pt1", "rvcheck", "rversions", "SASxport", "shiny", "skimr", "slam", "sna", "sp", "spacyr", "spaMM", "SparseM", "SQUAREM", "stm", "survey", "survival", "systemfit", "testthat", "textdata", "tidytext", "tidyverse", "tinytex", "tm", "topicmodels", "TSP", "unmarked", "uuid", "vcd", "vctrs", "VGAM", "weights", "xml2", "xts", "zip", "zoo"))
install.packages(c("bdsmatrix", "bibtex", "bit", "blob", "broom", "car", "carData", "caret", "caTools", "censReg", "checkmate", "chron", "cli", "corrr", "covr", "crosstalk", "DBI", "dendextend", "devtools", "digest", "dplyr", "DT", "e1071", "effects", "forcats", "foreach", "forecast", "fracdiff", "fs", "ggplot2", "ggpubr", "ggrepel", "glmmTMB", "glmnet", "glue", "gplots", "h2o", "haven", "hexbin", "Hmisc", "htmlTable", "igraph", "infer", "ISOcodes", "iterators", "janitor", "jomo", "lattice", "latticeExtra", "lava", "leaps", "lifecycle", "lmerTest", "maptools", "MASS", "matrixStats", "maxLik", "mice", "miscTools", "ModelMetrics", "modelr", "modeltools", "MuMIn", "mvtnorm", "nlme", "openxlsx", "ordinal", "pbkrtest", "plm", "plotly", "plotrix", "plyr", "prodlim", "quanteda", "quantmod", "quantreg", "raster", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppArmadillo", "RcppParallel", "RCurl", "Rdpack", "recipes", "rlang", "RMySQL", "RSpectra", "RSQLite", "Rttf2pt1", "rvcheck", "rversions", "SASxport", "shiny", "skimr", "slam", "sna", "sp", "spacyr", "spaMM", "SparseM", "SQUAREM", "stm", "survey", "survival", "systemfit", "testthat", "textdata", "tidytext", "tidyverse", "tinytex", "tm", "topicmodels", "TSP", "unmarked", "uuid", "vcd", "vctrs", "VGAM", "weights", "xml2", "xts", "zip", "zoo"))
install.packages(c("bdsmatrix", "bibtex", "bit", "blob", "broom", "car", "carData", "caret", "caTools", "censReg", "checkmate", "chron", "cli", "corrr", "covr", "crosstalk", "DBI", "dendextend", "devtools", "digest", "dplyr", "DT", "e1071", "effects", "forcats", "foreach", "forecast", "fracdiff", "fs", "ggplot2", "ggpubr", "ggrepel", "glmmTMB", "glmnet", "glue", "gplots", "h2o", "haven", "hexbin", "Hmisc", "htmlTable", "igraph", "infer", "ISOcodes", "iterators", "janitor", "jomo", "lattice", "latticeExtra", "lava", "leaps", "lifecycle", "lmerTest", "maptools", "MASS", "matrixStats", "maxLik", "mice", "miscTools", "ModelMetrics", "modelr", "modeltools", "MuMIn", "mvtnorm", "nlme", "openxlsx", "ordinal", "pbkrtest", "plm", "plotly", "plotrix", "plyr", "prodlim", "quanteda", "quantmod", "quantreg", "raster", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppArmadillo", "RcppParallel", "RCurl", "Rdpack", "recipes", "rlang", "RMySQL", "RSpectra", "RSQLite", "Rttf2pt1", "rvcheck", "rversions", "SASxport", "shiny", "skimr", "slam", "sna", "sp", "spacyr", "spaMM", "SparseM", "SQUAREM", "stm", "survey", "survival", "systemfit", "testthat", "textdata", "tidytext", "tidyverse", "tinytex", "tm", "topicmodels", "TSP", "unmarked", "uuid", "vcd", "vctrs", "VGAM", "weights", "xml2", "xts", "zip", "zoo"))
install.packages(c("bdsmatrix", "bibtex", "bit", "blob", "broom", "car", "carData", "caret", "caTools", "censReg", "checkmate", "chron", "cli", "corrr", "covr", "crosstalk", "DBI", "dendextend", "devtools", "digest", "dplyr", "DT", "e1071", "effects", "forcats", "foreach", "forecast", "fracdiff", "fs", "ggplot2", "ggpubr", "ggrepel", "glmmTMB", "glmnet", "glue", "gplots", "h2o", "haven", "hexbin", "Hmisc", "htmlTable", "igraph", "infer", "ISOcodes", "iterators", "janitor", "jomo", "lattice", "latticeExtra", "lava", "leaps", "lifecycle", "lmerTest", "maptools", "MASS", "matrixStats", "maxLik", "mice", "miscTools", "ModelMetrics", "modelr", "modeltools", "MuMIn", "mvtnorm", "nlme", "openxlsx", "ordinal", "pbkrtest", "plm", "plotly", "plotrix", "plyr", "prodlim", "quanteda", "quantmod", "quantreg", "raster", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppArmadillo", "RcppParallel", "RCurl", "Rdpack", "recipes", "rlang", "RMySQL", "RSpectra", "RSQLite", "Rttf2pt1", "rvcheck", "rversions", "SASxport", "shiny", "skimr", "slam", "sna", "sp", "spacyr", "spaMM", "SparseM", "SQUAREM", "stm", "survey", "survival", "systemfit", "testthat", "textdata", "tidytext", "tidyverse", "tinytex", "tm", "topicmodels", "TSP", "unmarked", "uuid", "vcd", "vctrs", "VGAM", "weights", "xml2", "xts", "zip", "zoo"))
install.packages("installr")
library(installr)
updateR()
updateR()
